/*/
using System;

class Program
{
    static void ImprimirPares(int numero)
    {
        if (numero <= 100)
        {
            if (numero % 2 == 0)
            {
                Console.WriteLine(numero);
            }
            ImprimirPares(numero + 1);
        }
    }

    static void Main(string[] args)
    {
        ImprimirPares(1);
    }
}
/*/


/*/
using System;

class Program
{
    static int SumaRecursiva(int n)
    {
        if (n == 1)
        {
            return 1;
        }
        else
        {
            return n + SumaRecursiva(n - 1);
        }
    }
    static void Main(string[] args)
    {
        int n = 10; // insertar el numero
        int resultado = SumaRecursiva(n);
        Console.WriteLine("La suma de los números del 1 al " + n + " es: " + resultado);
    }
}
/*/

/*/
using System;

class Program
{
    static void ImprimirPiramide(int n, int filaActual, int numeroActual)
    {
        if (filaActual > n)
        {
            return;
        }

        if (numeroActual <= filaActual)
        {
            Console.Write(numeroActual + " ");
            ImprimirPiramide(n, filaActual, numeroActual + 1);
        }
        else
        {
            Console.WriteLine();
            ImprimirPiramide(n, filaActual + 1, 1);
        }
    }

    static void Main(string[] args)
    {
        int n = 5; // base
        ImprimirPiramide(n, 1, 1);
    }
}
/*/

/*/

using System;

class Program
{
    static void ImprimirPiramideInvertida(int n, int filaActual, int numeroActual)
    {
        if (filaActual > n)
        {
            return;
        }

        if (numeroActual <= n - filaActual + 1)
        {
            Console.Write((n - numeroActual + 1) + " ");
            ImprimirPiramideInvertida(n, filaActual, numeroActual + 1);
        }
        else
        {
            Console.WriteLine();
            ImprimirPiramideInvertida(n, filaActual + 1, 1);
        }
    }

    static void Main(string[] args)
    {
        int n = 5; // inserte la base de la piramide invertida
        ImprimirPiramideInvertida(n, 1, 1);
    }
}
/*/

/*/
using System;

class Program
{
    static void Main()
    {
        int n = 5; // Número 5 para la tabla
        ImprimirTablaMultiplicar(n, 1);
    }

    static void ImprimirTablaMultiplicar(int n, int multiplicando)
    {
        if (multiplicando <= 10) // Imprimir asta el 10
        {
            Console.WriteLine($"{n} x {multiplicando} = {n * multiplicando}");
            ImprimirTablaMultiplicar(n, multiplicando + 1); 
        }
    }
}
/*/

/*/
using System;

class Program
{
    static void Main()
    {
        
        double[,] matrizNumerosReales = new double[,]
        {
            { 1.7, 2.3, 4.7 },
            { 7.2, 5.1, 6.8 },
            { 1.3, 1.2, 2.6 }
        };
        Console.WriteLine("Matriz de números reales:");
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                Console.Write(matrizNumerosReales[i, j] + "\t");
            }
            Console.WriteLine();
        }
    }
}

}

/*/

/*/
using System;
using System.Numerics;

class Program
{
    static void Main()
    {
       
        Complex[,] matrizNumerosComplejos = new Complex[,]
        {
            { new Complex(1, 2), new Complex(3, 4) },
            { new Complex(5, 6), new Complex(7, 8) }
        };

  
        Console.WriteLine("Matriz de números complejos:");
        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < 2; j++)
            {
                Console.Write(matrizNumerosComplejos[i, j] + "\t");
            }
            Console.WriteLine();
        }
    }
}
/*/

/*/
using System;

class Program
{
    static void Main()
    {
        int[][] matrizDeMatrices = new int[][]
        {
            new int[] { 1, 2, 3 },
            new int[] { 4, 5, 6 },
            new int[] { 7, 8, 9 }
        };

        Console.WriteLine("Matriz de matrices:");
        for (int i = 0; i < matrizDeMatrices.Length; i++)
        {
            for (int j = 0; j < matrizDeMatrices[i].Length; j++)
            {
                Console.Write(matrizDeMatrices[i][j] + "\t");
            }
            Console.WriteLine();
        }
    }
}
/*/
/*/

using System;

class Program
{
    static void Main()
    {
        int[,] matriz = new int[,]
        {
            { 1, 11, 3 },
            { 23, 5, 7 },
            { 10, 8, 9 }
        };

        //  Las dimensiones 
        int filas = matriz.GetLength(0);
        int columnas = matriz.GetLength(1);

        // Calcular elemento central
        int filaCentral = filas / 2;
        int columnaCentral = columnas / 2;

        // Acceder al elemento central
        int elementoCentral = matriz[filaCentral, columnaCentral];

        // Mostrar el elemento central Z
        Console.WriteLine("El elemento central de la matriz es: " + elementoCentral);
    }
}
/*/
/*/
using System;

class Program
{
    static void Main()
    {
        int[,] matriz1 = new int[,]
        {
            { 1, 2, 3 },
            { 4, 5, 6 }
        };
        int[,] matriz2 = new int[,]
        {
            { 7, 8 },
            { 9, 10 },
            { 11, 12 }
        };

        //  dimensiones  para la suma
        int filasComunes = Math.Min(matriz1.GetLength(0), matriz2.GetLength(0));
        int columnasComunes = Math.Min(matriz1.GetLength(1), matriz2.GetLength(1));

        // almacenar la suma
        int[,] matrizSuma = new int[filasComunes, columnasComunes];

        //  la suma 
        for (int i = 0; i < filasComunes; i++)
        {
            for (int j = 0; j < columnasComunes; j++)
            {
                matrizSuma[i, j] = matriz1[i, j] + matriz2[i, j];
            }
        }

       
        Console.WriteLine("Matriz resultante de la suma:");
        for (int i = 0; i < filasComunes; i++)
        {
            for (int j = 0; j < columnasComunes; j++)
            {
                Console.Write(matrizSuma[i, j] + "\t");
            }
            Console.WriteLine();
        }
    }
}
/*/
/*/
using System;
class Program
{
    static void Main()
    {
        // la matriz 
        int[,] matriz = new int[,]
        {
            { 1, 2, 3 },
            { 4, 5, 6 },
            { 7, 8, 9 }
        };
        //  multiplicar la matriz
        int numero = 2;

        // Multiplicar la matriz por el número
        int filas = matriz.GetLength(0);
        int columnas = matriz.GetLength(1);
        int[,] matrizResultado = new int[filas, columnas];

        for (int i = 0; i < filas; i++)
        {
            for (int j = 0; j < columnas; j++)
            {
                matrizResultado[i, j] = matriz[i, j] * numero;
            }
        }
        // Mostrar 
        Console.WriteLine("Matriz resultante de la multiplicación:");
        for (int i = 0; i < filas; i++)
        {
            for (int j = 0; j < columnas; j++)
            {
                Console.Write(matrizResultado[i, j] + "\t");
            }
            Console.WriteLine();
        }
    }

/*/
/*/
using System;

class Program
{
    static void Main()
    {
        // La matriz 
        int[,] matriz = new int[,]
        {
            { 1, 2, 3 },
            { 4, 5, 6 },
            { 7, 8, 9 }
        };

        // la media de los elementos de la matriz
        int filas = matriz.GetLength(0);
        int columnas = matriz.GetLength(1);
        int totalElementos = filas * columnas;
        int sumaTotal = 0;

        // Sumar los elementos de la matriz
        for (int i = 0; i < filas; i++)
        {
            for (int j = 0; j < columnas; j++)
            {
                sumaTotal += matriz[i, j];
            }
        }

        // Calcular la media
        double media = (double)sumaTotal / totalElementos;

        // Mostrar la media en la consola
        Console.WriteLine("La media de los elementos de la matriz es: " + media);
    }
}
/*/
/*/
using System;

class Program
{
    static void Main()
    {
        // Crear una matriz 
        int filas = 100;
        int columnas = 100;
        int[,] matrizAleatoria = new int[filas, columnas];

        Random random = new Random();

        //  matriz con números aleatorios
        for (int i = 0; i < filas; i++)
        {
            for (int j = 0; j < columnas; j++)
            {
                matrizAleatoria[i, j] = random.Next(1, 101); //  números aleatorios del 1 al 100
            }
        }

        // Mostrar la matriz 
        ImprimirMatriz(matrizAleatoria);
    }

    static void ImprimirMatriz(int[,] matriz)
    {
        for (int i = 0; i < matriz.GetLength(0); i++)
        {
            for (int j = 0; j < matriz.GetLength(1); j++)
            {
                Console.Write(matriz[i, j] + "\t");
            }
            Console.WriteLine();
        }
    }
}

/*/
/*/
using System;
using System.Linq;

class Program
{
    static void Main()
    {
        // Definir la matriz de ejemplo
        int[,] matriz = new int[,]
        {
            { 1, 2, 3 },
            { 4, 5, 6 },
            { 7, 8, 9 }
        };

        // Calcular la media de los elementos
        double media = matriz.Cast<int>().Average();

        // Calcular la mediana de los elementos
        int[] elementosOrdenados = matriz.Cast<int>().OrderBy(x => x).ToArray();
        double mediana;
        if (elementosOrdenados.Length % 2 == 0)
        {
            mediana = (elementosOrdenados[elementosOrdenados.Length / 2 - 1] + elementosOrdenados[elementosOrdenados.Length / 2]) / 2.0;
        }
        else
        {
            mediana = elementosOrdenados[elementosOrdenados.Length / 2];
        }

        // Calcular la desviación estándar de los elementos
        double mediaCuadratica = matriz.Cast<int>().Select(x => Math.Pow(x - media, 2)).Average();
        double desviacionEstandar = Math.Sqrt(mediaCuadratica);

        // resultados
        Console.WriteLine("La media de los elementos de la matriz es: " + media);
        Console.WriteLine("La mediana de los elementos de la matriz es: " + mediana);
        Console.WriteLine("La desviación estándar de los elementos de la matriz es: " + desviacionEstandar);
    }
}

/*/
/*/
using System;

class Program
{
    static void Main()
    {
     
        int[,] matriz = new int[,]
        {
            { 1, 5, 3 },
            { 9, 2, 7 },
            { 4, 8, 6 }
        };

        //  máximo de la matriz
        int maximo = EncontrarElementoMaximo(matriz);

        // elemento máximo en  consola
        Console.WriteLine("El elemento máximo de la matriz es: " + maximo);
    }

    static int EncontrarElementoMaximo(int[,] matriz)
    {
        int maximo = int.MinValue; //  mínimo 

        // Recorrer la matriz máximo
        for (int i = 0; i < matriz.GetLength(0); i++)
        {
            for (int j = 0; j < matriz.GetLength(1); j++)
            {
                if (matriz[i, j] > maximo)
                {
                    maximo = matriz[i, j];
                }
            }
        }

        return maximo;
    }
}
/*/
/*
class Program
{
    static void Main()
    {
        int[,] matriz = new int[,]
        {
            { 1, 2, -1, -4, -20 },
            { -8, -3, 4, 2, 1 },
            { 3, 8, 10, 1, 3 },
            { -4, -1, 1, 7, -6 }
        };

        // Encontrar yor suma
        int maxSuma = EncontrarSubmatrizMayorSuma(matriz);

        // Mostrar la suma  de mayor
        Console.WriteLine("La suma de la submatriz de mayor suma es: " + maxSuma);
    }

    static int EncontrarSubmatrizMayorSuma(int[,] matriz)
    {
        int filas = matriz.GetLength(0);
        int columnas = matriz.GetLength(1);
        int maxSuma = int.MinValue;

        for (int i = 0; i < filas; i++)
        {
            int[] temp = new int[columnas];
            for (int j = i; j < filas; j++)
            {
                for (int k = 0; k < columnas; k++)
                {
                    temp[k] += matriz[j, k];
                }
                maxSuma = Math.Max(maxSuma, Kadane(temp));
            }
        }

        return maxSuma;
    }
    static int Kadane(int[] arr)
    {
        int maxHastaAhora = arr[0];
        int maxGlobal = arr[0];

        for (int i = 1; i < arr.Length; i++)
        {
            maxHastaAhora = Math.Max(arr[i], maxHastaAhora + arr[i]);
            maxGlobal = Math.Max(maxGlobal, maxHastaAhora);
        }

        return maxGlobal;
    }
}

/*/
using System;

class Program
{
    static void Main()
    {
        // Definir las matrices de ejemplo
        double[,] matriz1 = new double[,]
        {
            { 1.0, 2.0, 3.0 },
            { 4.0, 5.0, 6.0 },
            { 7.0, 8.0, 9.0 }
        };

        double[,] matriz2 = new double[,]
        {
            { 9.0, 8.0, 7.0 },
            { 6.0, 5.0, 4.0 },
            { 3.0, 2.0, 1.0 }
        };

        // Calcular la matriz de covarianza z
        double[,] matrizCovarianza = CalcularMatrizCovarianza(matriz1, matriz2);

        // Mostrar  covarianza 
        Console.WriteLine("Matriz de covarianza:");
        for (int i = 0; i < matrizCovarianza.GetLength(0); i++)
        {
            for (int j = 0; j < matrizCovarianza.GetLength(1); j++)
            {
                Console.Write(matrizCovarianza[i, j] + "\t");
            }
            Console.WriteLine();
        }
    }

    static double[,] CalcularMatrizCovarianza(double[,] matriz1, double[,] matriz2)
    {
        int filas = matriz1.GetLength(0);
        int columnas = matriz1.GetLength(1);
        double[,] matrizCovarianza = new double[columnas, columnas];

        //matriz de covarianza
        for (int i = 0; i < columnas; i++)
        {
            for (int j = 0; j < columnas; j++)
            {
                double covarianza = 0;
                for (int k = 0; k < filas; k++)
                {
                    covarianza += (matriz1[k, i] - CalcularMedia(matriz1, i)) * (matriz2[k, j] - CalcularMedia(matriz2, j));
                }
                matrizCovarianza[i, j] = covarianza / (filas - 1);
            }
        }

        return matrizCovarianza;
    }

    static double CalcularMedia(double[,] matriz, int columna)
    {
        double suma = 0;
        int filas = matriz.GetLength(0);

        for (int i = 0; i < filas; i++)
        {
            suma += matriz[i, columna];
        }

        return suma / filas;
    }
}